import DevConfig from "./model/DevConfig";
import RestCallOptions from "./model/RestCallOptions";
import Logger from "./Logger";
import Commands from "./modules/Commands";
import Configuration from "./modules/Configuration";
import Contents from "./modules/Contents";
import Events from "./modules/Events";
import Requests from "./modules/Requests";
import Urls from "./modules/Urls";
import Ws from "./modules/Ws";
import Forms from "./modules/Forms";
declare class JsApiProxy {
    static readonly uiBasePath: string;
    static readonly restPath: string;
    static readonly configFileName: string;
    private static instance;
    private devMode;
    private apiFound;
    readonly commands: Commands;
    readonly configuration: Configuration;
    readonly contents: Contents;
    readonly events: Events;
    readonly requests: Requests;
    readonly urls: Urls;
    readonly ws: Ws;
    readonly forms: Forms;
    devConfig: DevConfig;
    readonly logger: Logger;
    private constructor();
    static getInstance(devConfig: DevConfig): JsApiProxy;
    setMethodLogging(bool: boolean): void;
    isDevMode(): boolean;
    isApiFound(): boolean;
    isDevConfigFound(): boolean;
    getDevConfig(): DevConfig | null;
    setDevConfig(config: DevConfig): void;
    private setup;
    private loadJsApi;
    isOnObjectCard(): boolean;
    isAddForm(): boolean;
    isEditForm(): boolean;
    findApplicationCode(): string;
    findContentCode(): string;
    extractSubjectUuid(): string | null;
    registerAttributeToModification(attributeCode: string, resultCallback: () => void): void;
    getCurrentUser(): Record<string, string | null>;
    getCurrentLocale(): string;
    getAppBaseUrl(): string;
    getAppRestBaseUrl(): string;
    getViewMode(): string;
    private devRestCall;
    restCall(restOfTheUrl: string, options: RestCallOptions): Promise<any>;
    restCallAsJson(restOfTheUrl: string, options: RestCallOptions): Promise<any>;
    restCallModule(moduleCode: string, functionName: string, args: unknown[]): Promise<unknown>;
}
export default JsApiProxy;
//# sourceMappingURL=JsApiProxy.d.ts.map